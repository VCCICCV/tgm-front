# 定义一个名字
name: deploy-website
# 指定在main分支push时执行
on:
  push:
    branches: [main]
# 指定任务
jobs:
  npm-build:
    name: npm-build工作
    runs-on: ubuntu-latest # 指定操作系统

    # 步骤
    steps:
      # uses指定用什么包
      # name指定名称
      # run指定操作
      - name: checkout code
        uses: actions/checkout@v4.1.7

      - name: install nodejs
        uses: actions/setup-node@v4.0.3
        with:
          node-version: "18.19.x"

      - name: instal deps
        run: npm install # 安装依赖

      - name: build app
        run: npm run build # 构建应用

      - name: copy dist file with ssh
        uses: easingthemes/ssh-deploy@main # 每个插件参数不一样，需要看文档
        # 这个文件会公开
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }} # 指定 SSH 主机
          REMOTE_USER: ${{ secrets.REMOTE_USER }} # 指定 SSH 用户名
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY}} # 指定 SSH 密码
          ARGS: "-avzr --delete" # 指定 rsync 参数
          SOURCE: './.next' # 源目录，也就是build构建后的目录，如果直接上传整个项目，那打包就没有意义了
          TARGET: '/home/dist' # 指定远程服务器上的目标目录，需要提前创建

# name: Build and Deploy Docker Image

# on:
#   push:
#     branches:
#       - main
#     # 你也可以指定打标签的时候触发构建
#     # tags:
#     #   - 'v*' # 当有以 'v' 开头的 tag
# jobs:
#   build-and-deploy:
#     name: npm-build工作
#     runs-on: ubuntu-latest # 指定操作系统
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: install nodejs
#         uses: actions/setup-node@v4.0.3
#         with:
#           node-version: "20.x"

#       - name: Login to Docker Hub # 登录Docker Hub
#         run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
  
#       - name: Build and push Docker image
#         run: |
#           make image.push # 构建并推送 Docker 镜像
#       - name: Deploy to server
#         uses: appleboy/ssh-action@master
#         env:
#           DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#           GIT_TAG: ${{ steps.get_version.outputs.VERSION }} # 使用之前步骤中获取的版本号
#         with:
#           host: ${{ secrets.SERVER_HOST }}
#           username: ${{ secrets.SERVER_USERNAME }}
#           password: ${{ secrets.SERVER_PASSWORD }}
#           port: 22
#           envs: DOCKERHUB_USERNAME,GIT_TAG
#           script: |
#               # 删除所有指定名称的镜像
#               docker rmi $(docker images -q $DOCKERHUB_USERNAME/kkdl)
#               # 拉取 Docker 镜像
#               docker pull docker.io/$DOCKERHUB_USERNAME/kkdl:$GIT_TAG 
#               # 检查容器是否存在，停止并删除已存在的容器，然后运行新的容器
#               docker container ls -a | grep -q "kkdl" && docker stop kkdl && docker rm kkdl
#               docker run -d --name kkdl -p 6001:6001 $DOCKERHUB_USERNAME/kkdl:$GIT_TAG